[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Table of app name and enabled hot keys.\nDefault is all enabled.\nShould be set before SwitchableHotkey:init() called.\ne.g. \nspoon.SwitchableHotkey.acceptOnly = {\n  [\"Emacs\"] = {}, -- accept NONE\n  [\"iTerm2\"] = {  -- accept partially\n    {{'ctrl'}, ']'},\n  }\n  -- Hotkeys of apps not listed above are fully enabled\n}",
        "desc" : "Table of app name and enabled hot keys.",
        "def" : "SwitchableHotkey.acceptOnly",
        "stripped_doc" : [
          "Table of app name and enabled hot keys.",
          "Default is all enabled.",
          "Should be set before SwitchableHotkey:init() called.",
          "e.g. ",
          "spoon.SwitchableHotkey.acceptOnly = {",
          "  [\"Emacs\"] = {}, -- accept NONE",
          "  [\"iTerm2\"] = {  -- accept partially",
          "    {{'ctrl'}, ']'},",
          "  }",
          "  -- Hotkeys of apps not listed above are fully enabled",
          "}"
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey.acceptOnly",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "acceptOnly",
        "parameters" : [

        ]
      },
      {
        "doc" : "Internal Table for looking up accepted hotkeys.",
        "desc" : "Internal Table for looking up accepted hotkeys.",
        "def" : "SwitchableHotkey._acceptOnly",
        "stripped_doc" : [
          "Internal Table for looking up accepted hotkeys."
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey._acceptOnly",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "_acceptOnly",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Download: [https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/SwitchableHotkey.spoon.zip](https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/SwitchableHotkey.spoon.zip)",
    "Method" : [
      {
        "doc" : "Binds hotkey\n\nParameters:\n * keyspec\n\nReturns:\n * SwitchableHotkey",
        "desc" : "Binds hotkey",
        "def" : "SwitchableHotkey:bindSpec()",
        "stripped_doc" : [
          "Binds hotkey",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:bindSpec()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "bindSpec",
        "parameters" : [
          " * keyspec",
          ""
        ]
      },
      {
        "doc" : "Start Listener\n\nParameters:\n * None\n\nReturns:\n * SwitchableHotkey",
        "desc" : "Start Listener",
        "def" : "SwitchableHotkey:start()",
        "stripped_doc" : [
          "Start Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:start()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Stop Listener\n\nParameters:\n * None\n\nReturns:\n * SwitchableHotkey",
        "desc" : "Stop Listener",
        "def" : "SwitchableHotkey:stop()",
        "stripped_doc" : [
          "Stop Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:stop()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * SwitchableHotkey",
        "desc" : "initializer",
        "def" : "SwitchableHotkey:init()",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:init()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "init",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Internal Table for looking up accepted hotkeys.",
        "desc" : "Internal Table for looking up accepted hotkeys.",
        "def" : "SwitchableHotkey._acceptOnly",
        "stripped_doc" : [
          "Internal Table for looking up accepted hotkeys."
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey._acceptOnly",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "_acceptOnly",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table of app name and enabled hot keys.\nDefault is all enabled.\nShould be set before SwitchableHotkey:init() called.\ne.g. \nspoon.SwitchableHotkey.acceptOnly = {\n  [\"Emacs\"] = {}, -- accept NONE\n  [\"iTerm2\"] = {  -- accept partially\n    {{'ctrl'}, ']'},\n  }\n  -- Hotkeys of apps not listed above are fully enabled\n}",
        "desc" : "Table of app name and enabled hot keys.",
        "def" : "SwitchableHotkey.acceptOnly",
        "stripped_doc" : [
          "Table of app name and enabled hot keys.",
          "Default is all enabled.",
          "Should be set before SwitchableHotkey:init() called.",
          "e.g. ",
          "spoon.SwitchableHotkey.acceptOnly = {",
          "  [\"Emacs\"] = {}, -- accept NONE",
          "  [\"iTerm2\"] = {  -- accept partially",
          "    {{'ctrl'}, ']'},",
          "  }",
          "  -- Hotkeys of apps not listed above are fully enabled",
          "}"
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey.acceptOnly",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "acceptOnly",
        "parameters" : [

        ]
      },
      {
        "doc" : "Binds hotkey\n\nParameters:\n * keyspec\n\nReturns:\n * SwitchableHotkey",
        "desc" : "Binds hotkey",
        "def" : "SwitchableHotkey:bindSpec()",
        "stripped_doc" : [
          "Binds hotkey",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:bindSpec()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "bindSpec",
        "parameters" : [
          " * keyspec",
          ""
        ]
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * SwitchableHotkey",
        "desc" : "initializer",
        "def" : "SwitchableHotkey:init()",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:init()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "init",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Start Listener\n\nParameters:\n * None\n\nReturns:\n * SwitchableHotkey",
        "desc" : "Start Listener",
        "def" : "SwitchableHotkey:start()",
        "stripped_doc" : [
          "Start Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:start()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Stop Listener\n\nParameters:\n * None\n\nReturns:\n * SwitchableHotkey",
        "desc" : "Stop Listener",
        "def" : "SwitchableHotkey:stop()",
        "stripped_doc" : [
          "Stop Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "SwitchableHotkey:stop()",
        "type" : "Method",
        "returns" : [
          " * SwitchableHotkey"
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "SwitchableHotkey"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "e.g.\nspoon.LastKeyRepeat.mapping = {\n  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'h' } },\n  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'l' } },\n}",
        "desc" : "e.g.",
        "def" : "LastKeyRepeat.mapping",
        "stripped_doc" : [
          "e.g.",
          "spoon.LastKeyRepeat.mapping = {",
          "  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'h' } },",
          "  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'l' } },",
          "}"
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat.mapping",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "mapping",
        "parameters" : [

        ]
      },
      {
        "doc" : "when to timeout 2nd stroke",
        "desc" : "when to timeout 2nd stroke",
        "def" : "LastKeyRepeat.mapping",
        "stripped_doc" : [
          "when to timeout 2nd stroke"
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat.mapping",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "mapping",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table of apps which you want to temporary disable LastKeyRepeat functions.\ne.g. \nspoon.LastKeyRepeat.appsDisable = { \"iTerm2\" }",
        "desc" : "Table of apps which you want to temporary disable LastKeyRepeat functions.",
        "def" : "LastKeyRepeat.appsDisable",
        "stripped_doc" : [
          "Table of apps which you want to temporary disable LastKeyRepeat functions.",
          "e.g. ",
          "spoon.LastKeyRepeat.appsDisable = { \"iTerm2\" }"
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat.appsDisable",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "appsDisable",
        "parameters" : [

        ]
      },
      {
        "doc" : "Internal Table for looking up disabled apps.",
        "desc" : "Internal Table for looking up disabled apps.",
        "def" : "LastKeyRepeat._appsDisable",
        "stripped_doc" : [
          "Internal Table for looking up disabled apps."
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat._appsDisable",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "_appsDisable",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "tmux bind-key -r option-like function",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "tmux bind-key -r option-like function\n\nDownload: [https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/LastKeyRepeat.spoon.zip](https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/LastKeyRepeat.spoon.zip)\nthanks to this issue\nhttps:\/\/github.com\/Hammerspoon\/hammerspoon\/issues\/1128",
    "Method" : [
      {
        "doc" : "Start waching eventtap and application\n\nParameters:\n * None\n\nReturns:\n * LastKeyRepeat",
        "desc" : "Start waching eventtap and application",
        "def" : "LastKeyRepeat:start()",
        "stripped_doc" : [
          "Start waching eventtap and application",
          ""
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat:start()",
        "type" : "Method",
        "returns" : [
          " * LastKeyRepeat"
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "stop waching eventtap and application\n\nParameters:\n * None\n\nReturns:\n * LastKeyRepeat",
        "desc" : "stop waching eventtap and application",
        "def" : "LastKeyRepeat:stop()",
        "stripped_doc" : [
          "stop waching eventtap and application",
          ""
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat:stop()",
        "type" : "Method",
        "returns" : [
          " * LastKeyRepeat"
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * LastKeyRepeat",
        "desc" : "initializer",
        "def" : "LastKeyRepeat:init()",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat:init()",
        "type" : "Method",
        "returns" : [
          " * LastKeyRepeat"
        ],
        "name" : "init",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Internal Table for looking up disabled apps.",
        "desc" : "Internal Table for looking up disabled apps.",
        "def" : "LastKeyRepeat._appsDisable",
        "stripped_doc" : [
          "Internal Table for looking up disabled apps."
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat._appsDisable",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "_appsDisable",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table of apps which you want to temporary disable LastKeyRepeat functions.\ne.g. \nspoon.LastKeyRepeat.appsDisable = { \"iTerm2\" }",
        "desc" : "Table of apps which you want to temporary disable LastKeyRepeat functions.",
        "def" : "LastKeyRepeat.appsDisable",
        "stripped_doc" : [
          "Table of apps which you want to temporary disable LastKeyRepeat functions.",
          "e.g. ",
          "spoon.LastKeyRepeat.appsDisable = { \"iTerm2\" }"
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat.appsDisable",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "appsDisable",
        "parameters" : [

        ]
      },
      {
        "doc" : "e.g.\nspoon.LastKeyRepeat.mapping = {\n  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'h' } },\n  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'l' } },\n}",
        "desc" : "e.g.",
        "def" : "LastKeyRepeat.mapping",
        "stripped_doc" : [
          "e.g.",
          "spoon.LastKeyRepeat.mapping = {",
          "  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'h' } },",
          "  { first = { key = 'g', mods = {'ctrl'} }, second = { key = 'l' } },",
          "}"
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat.mapping",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "mapping",
        "parameters" : [

        ]
      },
      {
        "doc" : "when to timeout 2nd stroke",
        "desc" : "when to timeout 2nd stroke",
        "def" : "LastKeyRepeat.mapping",
        "stripped_doc" : [
          "when to timeout 2nd stroke"
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat.mapping",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "mapping",
        "parameters" : [

        ]
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * LastKeyRepeat",
        "desc" : "initializer",
        "def" : "LastKeyRepeat:init()",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat:init()",
        "type" : "Method",
        "returns" : [
          " * LastKeyRepeat"
        ],
        "name" : "init",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Start waching eventtap and application\n\nParameters:\n * None\n\nReturns:\n * LastKeyRepeat",
        "desc" : "Start waching eventtap and application",
        "def" : "LastKeyRepeat:start()",
        "stripped_doc" : [
          "Start waching eventtap and application",
          ""
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat:start()",
        "type" : "Method",
        "returns" : [
          " * LastKeyRepeat"
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "stop waching eventtap and application\n\nParameters:\n * None\n\nReturns:\n * LastKeyRepeat",
        "desc" : "stop waching eventtap and application",
        "def" : "LastKeyRepeat:stop()",
        "stripped_doc" : [
          "stop waching eventtap and application",
          ""
        ],
        "notes" : [

        ],
        "signature" : "LastKeyRepeat:stop()",
        "type" : "Method",
        "returns" : [
          " * LastKeyRepeat"
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "LastKeyRepeat"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Default key map",
        "desc" : "Default key map",
        "def" : "PseudoNumKey.hotkeys",
        "stripped_doc" : [
          "Default key map"
        ],
        "notes" : [

        ],
        "signature" : "PseudoNumKey.hotkeys",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "hotkeys",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "Pseudo numeric keypad with FN key for Mac",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Pseudo numeric keypad with FN key for Mac\n\nDownload: [https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/PseudoNumKey.spoon.zip](https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/PseudoNumKey.spoon.zip)",
    "Method" : [
      {
        "doc" : "Start Event Listener\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Start Event Listener",
        "def" : "PseudoNumKey:start()",
        "stripped_doc" : [
          "Start Event Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "PseudoNumKey:start()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Stop Event Listener\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Stop Event Listener",
        "def" : "PseudoNumKey:stop()",
        "stripped_doc" : [
          "Stop Event Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "PseudoNumKey:stop()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Default key map",
        "desc" : "Default key map",
        "def" : "PseudoNumKey.hotkeys",
        "stripped_doc" : [
          "Default key map"
        ],
        "notes" : [

        ],
        "signature" : "PseudoNumKey.hotkeys",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "hotkeys",
        "parameters" : [

        ]
      },
      {
        "doc" : "Start Event Listener\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Start Event Listener",
        "def" : "PseudoNumKey:start()",
        "stripped_doc" : [
          "Start Event Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "PseudoNumKey:start()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Stop Event Listener\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Stop Event Listener",
        "def" : "PseudoNumKey:stop()",
        "stripped_doc" : [
          "Stop Event Listener",
          ""
        ],
        "notes" : [

        ],
        "signature" : "PseudoNumKey:stop()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "PseudoNumKey"
  },
  {
    "Constant": [],
    "submodules": [],
    "Function": [],
    "Variable": [
      {
        "desc": "The format is bellow.",
        "name": "snippets",
        "doc": "The format is bellow.\n{ text = \"TEXT\", action = \"ACTION_NAME\", contents = \"CONTENTS\" }\nTEXT is index to choose snippet.\nAction is \"text\" or \"shell\" or \"hs\".\nWhen action is text, CONTENTS is directly used.\nWhen action is shell, CONTENTS is evaluated as shell script.\nWhen action is hs, CONTENTS is called as hammerspoon function.\ne.g. \nspoon.Snippet.snippets = {\n  {\n    text = \"temlate for greeting\",\n    action = \"text\",\n    contents = \"Hello!\",\n  },\n  {\n    text = \"echo greeting\",\n    action = \"shell\",\n    contents = \"echo 'Hello!'\",\n  },\n  {\n    text = \"notify greeting\",\n    action = \"hs\",\n    contents = function () hs.notify.show(\"title\", \"\", \"\") end,\n  },\n}",
        "stripped_doc": [
          "The format is bellow.",
          "{ text = \"TEXT\", action = \"ACTION_NAME\", contents = \"CONTENTS\" }",
          "TEXT is index to choose snippet.",
          "Action is \"text\" or \"shell\" or \"hs\".",
          "When action is text, CONTENTS is directly used.",
          "When action is shell, CONTENTS is evaluated as shell script.",
          "When action is hs, CONTENTS is called as hammerspoon function.",
          "e.g. ",
          "spoon.Snippet.snippets = {",
          "  {",
          "    text = \"temlate for greeting\",",
          "    action = \"text\",",
          "    contents = \"Hello!\",",
          "  },",
          "  {",
          "    text = \"echo greeting\",",
          "    action = \"shell\",",
          "    contents = \"echo 'Hello!'\",",
          "  },",
          "  {",
          "    text = \"notify greeting\",",
          "    action = \"hs\",",
          "    contents = function () hs.notify.show(\"title\", \"\", \"\") end,",
          "  },",
          "}"
        ],
        "notes": [],
        "signature": "Snippet.snippets",
        "type": "Variable",
        "returns": [],
        "def": "Snippet.snippets",
        "parameters": []
      }
    ],
    "stripped_doc": [],
    "Deprecated": [],
    "type": "Module",
    "desc": "Manage snippets.",
    "Constructor": [],
    "items": [
      {
        "desc": "The format is bellow.",
        "name": "snippets",
        "doc": "The format is bellow.\n{ text = \"TEXT\", action = \"ACTION_NAME\", contents = \"CONTENTS\" }\nTEXT is index to choose snippet.\nAction is \"text\" or \"shell\" or \"hs\".\nWhen action is text, CONTENTS is directly used.\nWhen action is shell, CONTENTS is evaluated as shell script.\nWhen action is hs, CONTENTS is called as hammerspoon function.\ne.g. \nspoon.Snippet.snippets = {\n  {\n    text = \"temlate for greeting\",\n    action = \"text\",\n    contents = \"Hello!\",\n  },\n  {\n    text = \"echo greeting\",\n    action = \"shell\",\n    contents = \"echo 'Hello!'\",\n  },\n  {\n    text = \"notify greeting\",\n    action = \"hs\",\n    contents = function () hs.notify.show(\"title\", \"\", \"\") end,\n  },\n}",
        "stripped_doc": [
          "The format is bellow.",
          "{ text = \"TEXT\", action = \"ACTION_NAME\", contents = \"CONTENTS\" }",
          "TEXT is index to choose snippet.",
          "Action is \"text\" or \"shell\" or \"hs\".",
          "When action is text, CONTENTS is directly used.",
          "When action is shell, CONTENTS is evaluated as shell script.",
          "When action is hs, CONTENTS is called as hammerspoon function.",
          "e.g. ",
          "spoon.Snippet.snippets = {",
          "  {",
          "    text = \"temlate for greeting\",",
          "    action = \"text\",",
          "    contents = \"Hello!\",",
          "  },",
          "  {",
          "    text = \"echo greeting\",",
          "    action = \"shell\",",
          "    contents = \"echo 'Hello!'\",",
          "  },",
          "  {",
          "    text = \"notify greeting\",",
          "    action = \"hs\",",
          "    contents = function () hs.notify.show(\"title\", \"\", \"\") end,",
          "  },",
          "}"
        ],
        "notes": [],
        "signature": "Snippet.snippets",
        "type": "Variable",
        "returns": [],
        "def": "Snippet.snippets",
        "parameters": []
      },
      {
        "desc": "Binds hotkeys for Snippet",
        "name": "bindHotkeys",
        "doc": "Binds hotkeys for Snippet\n\nParameters:\n * mapping - A table containing hotkey objifier\/key details for the following items:\n  * show_snippet - Display the snippet chooser\n  * toggle_snippet - Show\/hide the snippet chooser",
        "stripped_doc": [
          "Binds hotkeys for Snippet",
          ""
        ],
        "notes": [],
        "signature": "Snippet:bindHotkeys(mapping)",
        "type": "Method",
        "returns": [],
        "def": "Snippet:bindHotkeys(mapping)",
        "parameters": [
          " * mapping - A table containing hotkey objifier\/key details for the following items:",
          "  * show_snippet - Display the snippet chooser",
          "  * toggle_snippet - Show\/hide the snippet chooser"
        ]
      },
      {
        "desc": "initializer",
        "name": "init",
        "doc": "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc": [
          "initializer",
          ""
        ],
        "notes": [],
        "signature": "Snippet:init()",
        "type": "Method",
        "returns": [
          " * None"
        ],
        "def": "Snippet:init()",
        "parameters": [
          " * None",
          ""
        ]
      },
      {
        "desc": "Display the snippet list in a chooser",
        "name": "showSnippet",
        "doc": "Display the snippet list in a chooser",
        "stripped_doc": [
          "Display the snippet list in a chooser"
        ],
        "notes": [],
        "signature": "Snippet:showSnippet()",
        "type": "Method",
        "returns": [],
        "def": "Snippet:showSnippet()",
        "parameters": []
      },
      {
        "desc": "Show\/hide the snippet list, depending on its current state",
        "name": "toggleSnippet",
        "doc": "Show\/hide the snippet list, depending on its current state",
        "stripped_doc": [
          "Show\/hide the snippet list, depending on its current state"
        ],
        "notes": [],
        "signature": "Snippet:toggleSnippet()",
        "type": "Method",
        "returns": [],
        "def": "Snippet:toggleSnippet()",
        "parameters": []
      }
    ],
    "Field": [],
    "Command": [],
    "doc": "Manage snippets.\n\nDownload: [https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/Snippet.spoon.zip](https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/Snippet.spoon.zip)",
    "Method": [
      {
        "desc": "initializer",
        "name": "init",
        "doc": "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc": [
          "initializer",
          ""
        ],
        "notes": [],
        "signature": "Snippet:init()",
        "type": "Method",
        "returns": [
          " * None"
        ],
        "def": "Snippet:init()",
        "parameters": [
          " * None",
          ""
        ]
      },
      {
        "desc": "Display the snippet list in a chooser",
        "name": "showSnippet",
        "doc": "Display the snippet list in a chooser",
        "stripped_doc": [
          "Display the snippet list in a chooser"
        ],
        "notes": [],
        "signature": "Snippet:showSnippet()",
        "type": "Method",
        "returns": [],
        "def": "Snippet:showSnippet()",
        "parameters": []
      },
      {
        "desc": "Show\/hide the snippet list, depending on its current state",
        "name": "toggleSnippet",
        "doc": "Show\/hide the snippet list, depending on its current state",
        "stripped_doc": [
          "Show\/hide the snippet list, depending on its current state"
        ],
        "notes": [],
        "signature": "Snippet:toggleSnippet()",
        "type": "Method",
        "returns": [],
        "def": "Snippet:toggleSnippet()",
        "parameters": []
      },
      {
        "desc": "Binds hotkeys for Snippet",
        "name": "bindHotkeys",
        "doc": "Binds hotkeys for Snippet\n\nParameters:\n * mapping - A table containing hotkey objifier\/key details for the following items:\n  * show_snippet - Display the snippet chooser\n  * toggle_snippet - Show\/hide the snippet chooser",
        "stripped_doc": [
          "Binds hotkeys for Snippet",
          ""
        ],
        "notes": [],
        "signature": "Snippet:bindHotkeys(mapping)",
        "type": "Method",
        "returns": [],
        "def": "Snippet:bindHotkeys(mapping)",
        "parameters": [
          " * mapping - A table containing hotkey objifier\/key details for the following items:",
          "  * show_snippet - Display the snippet chooser",
          "  * toggle_snippet - Show\/hide the snippet chooser"
        ]
      }
    ],
    "name" : "Snippet"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Table of events and actions.\nEvents are all provided by caffeinate watcher.\n    ref: https:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html\nActios are \"attend\" or \"leave\".",
        "stripped_doc" : [
          "Table of events and actions.",
          "Events are all provided by caffeinate watcher.",
          "    ref: https:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html",
          "Actios are \"attend\" or \"leave\"."
        ],
        "parameters" : [

        ],
        "desc" : "Table of events and actions.",
        "notes" : [

        ],
        "signature" : "FoAttendance.events",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "events",
        "def" : "FoAttendance.events"
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "Very personal spoon to register my attendance.",
    "Constructor" : [

    ],
    "doc" : "Very personal spoon to register my attendance.\n\nDownload: [https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/FoAttendance.spoon.zip](https:\/\/github.com\/doiken\/Spoons\/raw\/master\/Spoons\/FoAttendance.spoon.zip)",
    "Method" : [
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "desc" : "initializer",
        "notes" : [

        ],
        "signature" : "FoAttendance:init()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "init",
        "def" : "FoAttendance:init()"
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "desc" : "initializer",
        "notes" : [

        ],
        "signature" : "FoAttendance:start()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "start",
        "def" : "FoAttendance:start()"
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "desc" : "initializer",
        "notes" : [

        ],
        "signature" : "FoAttendance:stop()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "stop",
        "def" : "FoAttendance:stop()"
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Table of events and actions.\nEvents are all provided by caffeinate watcher.\n    ref: https:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html\nActios are \"attend\" or \"leave\".",
        "stripped_doc" : [
          "Table of events and actions.",
          "Events are all provided by caffeinate watcher.",
          "    ref: https:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html",
          "Actios are \"attend\" or \"leave\"."
        ],
        "parameters" : [

        ],
        "desc" : "Table of events and actions.",
        "notes" : [

        ],
        "signature" : "FoAttendance.events",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "events",
        "def" : "FoAttendance.events"
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "desc" : "initializer",
        "notes" : [

        ],
        "signature" : "FoAttendance:init()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "init",
        "def" : "FoAttendance:init()"
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "desc" : "initializer",
        "notes" : [

        ],
        "signature" : "FoAttendance:start()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "start",
        "def" : "FoAttendance:start()"
      },
      {
        "doc" : "initializer\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "initializer",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "desc" : "initializer",
        "notes" : [

        ],
        "signature" : "FoAttendance:stop()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "stop",
        "def" : "FoAttendance:stop()"
      }
    ],
    "Field" : [

    ],
    "name" : "FoAttendance"
  }

]
